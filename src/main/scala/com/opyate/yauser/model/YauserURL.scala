package com.opyate.yauser.model

import net.liftweb._ 
import mapper._ 
import http._ 
import SHtml._ 
import util._ 
import Helpers._
 
import _root_.java.util.Date
 
class YauserURL extends KeyedMapper[String, YauserURL] {
  def getSingleton = YauserURL

  object urlId extends MappedStringIndex(this, 6) with IndexedField[String] {
    override def writePermission_? = true
	override def dbDisplay_? = true
	override def dbAutogenerated_? = false
 
	override lazy val defaultValue = YauserUtil.randomString(maxLen)
 
	private var myDirty = false
	override def dirty_? = myDirty
	override def dirty_?(b : Boolean) = { myDirty = b; super.dirty_?(b) }
	override def fieldCreatorString(dbType: DriverType, colName: String): String = colName+" VARCHAR("+maxLen+") NOT NULL UNIQUE "
  }
  def primaryKeyField = urlId
  
  object originalURL extends MappedStringIndex(this, 255) with IndexedField[String] {
	override def writePermission_? = true
	override def dbDisplay_? = true
	override def dbAutogenerated_? = false
    override def dbPrimaryKey_? = false
 
	override lazy val defaultValue = randomString(maxLen)
 
	private var myDirty = false
	override def dirty_? = myDirty
	override def dirty_?(b : Boolean) = { myDirty = b; super.dirty_?(b) }
	override def fieldCreatorString(dbType: DriverType, colName: String): String = colName+" VARCHAR("+maxLen+") NOT NULL UNIQUE "
 }

}
 
object YauserURL extends YauserURL with KeyedMetaMapper[String, YauserURL] {
  override def dbTableName = "yauserurl" // define the DB table name
}

object YauserUtil {
  /** random numbers generator */  
  private val random = new _root_.java.security.SecureRandom
  
  /** 
   * (Modified version of net.liftweb.util.StringHelpers#randomString)
   * 
   * Create a random string of a given size 
   * @param size size of the string to create. Must be a positive or nul integer 
   * @return the generated string 
   */  
  def randomString(size: Int): String = {
    def addChar(pos: Int, lastRand: Int, sb: StringBuilder): StringBuilder = {
      if (pos >= size) sb
      else {
        val randNum = if ((pos % 6) == 0) random.nextInt else lastRand
        // 0-9 = 48-57
        // A-Z = 65-90
        // a-z = 97-122
        // the below & 0x7f masks the random number to be 0 >= r <= 127
        // Anything not falling in the above ASCII ranges will be (n % 10).toChar to get an ASCII number 
        // and will have the following distribution (not entirely random, I know):
        // 0 -> 5
        // 1 -> 7
        // 2 -> 7
        // 3 -> 8
        // 4 -> 8
        // 5 -> 7
        // 6 -> 7
        // 7 -> 6
        // 8 -> 6
        // 9 -> 5
        // Also, do we end up with more numbers than letters in our "random" string?
        sb.append((randNum & 0x7f) match {
          case n if ((n >= 48 && n <= 57) || (n >= 65 && n <= 90) || (n >= 97 && n <= 122)) => (n).toChar
          case n => (n%10 + 48).toChar
        })
        addChar(pos + 1, randNum >> 5, sb)
      }
    }
    addChar(0, 0, new StringBuilder(size)).toString
  }
}